extend type Query{
    users: [User] @paginate
    user (id: ID @eq): User @find
    specialSeller: [User]
    resendEmailVerify:User @guard

    getMyFollowers:[Follower] @guard @paginate(builder:"App\\GraphQL\\Queries\\GetMyFollowers")

}


type User{
    id: ID
    name: String
    seller_name: String
    email_verified_at:String
    email:String

    level:String
    phone:String
    address:String
    image:String @field(resolver: "App\\GraphQL\\Resolvers\\Image@getImage")
    custom:String @field(resolver: "App\\GraphQL\\Resolvers\\Image@getCustomImage")
    logo:String @field(resolver: "App\\GraphQL\\Resolvers\\Image@getLogo")
    email_verified_at:String
    open_time:String
    close_time:String
    is_delivery:Boolean
    is_restaurant:Boolean
    is_active:Boolean
    is_seller:Boolean
    affiliate:String
    info:String
    following_count:Int
    products:[Product]  @hasMany
    plans:[Plan] @belongsToMany(relation:"plans")
    city:City @belongsTo
    is_special:Boolean
    total_balance:Float @field(resolver: "App\\GraphQL\\Resolvers\\HelperBalanceResolve@getTotalBalance")
    total_point:Float @field(resolver: "App\\GraphQL\\Resolvers\\HelperBalanceResolve@getTotalPoint")
    followers: [Follower] @hasMany


}
type Follower{
    user:User @belongsTo
    seller:User @belongsTo
}


extend type Mutation{

    verifyEmail(code:String!):User @guard
    updateUser(input:UpdateUserInput) : User  @guard

    createSeller(input:CreateSellerInput): User @guard

    updateAvatar(input:ImageUpdate) :User @guard

    updateSellerLogo(input:ImageUpdate) :User @guard

    followAccount(id:ID!):User @guard
    #    deleteUser(id:ID!) : User @delete
}

input ImageUpdate{
    image:Upload! @rules(apply:["required","image"],messages:[
        {
            rule:"required"
            message:"يرجى تحديد صورة"
        }
        {
            rule:"image"
            message:"صيغة الملف غير مدعومةة"
        }
    ])
}
input CreateSellerInput{
    seller_name:String! @rules(apply:["required","min:3"],messages:[
        {
            rule:"required"
            message:"اسم المتجر مطلوب"
        }
        {
            rule:"min"
            message:"يجب ان يحوي اسم المتجر 3 أحرف على الأقل"
        }
    ])
    info:String
    is_delivery:Boolean
    is_active_seller:Boolean
    open_time:String
    close_time:String
    address:String! @rules(apply:["required"],messages:[
        {
            rule:"required"
            message:"عنوان المتجر مطلوب"
        }

    ])
    image:Upload @rules(apply:["nullable","image"],messages:[
        {
            rule:"image"
            message:"صيغة الملف غير مدعومة"
        }
    ])

}




input UpdateUserInput{
    name:String! @rules(apply:["required","min:3"],messages:[
        {
            rule:"required"
            message:"الاسم مطلوب"
        }
        {
            rule:"min"
            message:"يجب ان يحوي الاسم 3 أحرف على الأقل"
        }
    ])
    email:String!  @rules(apply:["required","email"],messages:[
        {
            rule:"required"
            message:"البريد الإلكتروني مطلوب"
        }
        {
            rule:"email"
            message:"يرجى إدخال بريد إلكتروني صالح"
        }
        {
            rule:"unique"
            message:"البريد الإلكتروني مستخدم من قبل"
        }
    ])
    password:String @rules(apply:["nullable","min:8"],messages:[

        {
            rule:"min"
            message:"يجب ان تحوي كلمة المرور 8 أحرف على الأقل"
        }
    ])

    phone:String
    city_id:Int
    seller_name:String
    address:String
    is_delivery:Boolean
    close_time:String
    open_time:String
    info:String
    device_token:String
    latitude:Float
    longitude:Float

    image:Upload @rules(apply:["nullable","image"],messages:[
        {
            rule:"image"
            message:"صيغة الملف غير مدعومة"
        }
    ])
    logo:Upload @rules(apply:["nullable","image"],messages:[
        {
            rule:"image"
            message:"صيغة الملف غير مدعومة"
        }
    ])


}
