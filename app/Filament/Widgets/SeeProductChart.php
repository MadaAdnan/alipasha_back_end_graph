<?php

namespace App\Filament\Widgets;

use App\Enums\CategoryTypeEnum;
use App\Models\Product;
use App\Models\ProductView;
use DB;
use Filament\Widgets\ChartWidget;
use Flowframe\Trend\Trend;
use Flowframe\Trend\TrendValue;

class SeeProductChart extends ChartWidget
{
   // protected static ?string $heading = 'إحصائيات المنشورات';

    public static function canView(): bool
    {
        return auth()->user()->hasAllPermissions('widget_CreatedProductChart'); // TODO: Change the autogenerated stub
    }

    protected function getFilters(): ?array
    {
        return [
            'year' => 'هذه السنة',
            'back' => 'السنة السابقة',
            '360' => 'آخر 360 يوم',
            'today' => 'اليوم',
            'week' => 'آخر 7 أيام',
            'month' => 'هذا الشهر',
            '28' => 'آخر 28 يوم',
            '60' => 'آخر 60 يوم',

        ];
    }

    protected function getData(): array
    {
        $activeFilter = $this->filter;
        $start = now()->startOfYear();
        $end = now();
        $per = "perMonth";
        if ($activeFilter == 'week') {
            $start = now()->subDays(7);
            $per = "perDay";
        } elseif ($activeFilter == '28') {
            $start = now()->subDays(28);
            $per = "perDay";
        }elseif ($activeFilter == '60') {
            $start = now()->subDays(60);
            $per = "perWeek";
        } else if ($activeFilter == 'month') {
            $start = now()->startOfMonth();
            $per = "perWeek";
        } else if ($activeFilter == 'year') {
            $start = now()->startOfYear();

        } else if ($activeFilter == 'today') {
            $start = now()->startOfDay();
            $per = "perHour";
        } else if ($activeFilter == '360') {
            $start = now()->subYear();
            $per = "perMonth";
        } else if ($activeFilter == 'back') {
            $start = now()->startOfYear()->subYear();
            $end = now()->startOfYear()->subYear()->endOfYear();
            $per = "perMonth";
        }
        $products =  Trend::query(ProductView::whereHas('product',fn($query)=>$query->whereIn('type', [
            CategoryTypeEnum::PRODUCT->value,
            CategoryTypeEnum::RESTAURANT->value,
        ] )
           )->whereBetween('view_at',[$start,$end]))

            ->between(
                start: $start,
                end: $end,
            )
            ->$per()
            ->sum('count');
        $tender = Trend::query(ProductView::whereHas('product',fn($query)=>$query->whereIn('type', [
            CategoryTypeEnum::TENDER->value,

        ] )
        )->whereBetween('view_at',[$start,$end]))

            ->between(
                start: $start,
                end: $end,
            )
            ->$per()
            ->sum('count');;
        $job =Trend::query(ProductView::whereHas('product',fn($query)=>$query->whereIn('type', [
            CategoryTypeEnum::JOB->value,
            CategoryTypeEnum::SEARCH_JOB->value,
        ] )
        )->whereBetween('view_at',[$start,$end]))

            ->between(
                start: $start,
                end: $end,
            )
            ->$per()
            ->sum('count');;
        return [
            'datasets' => [
                [
                    'label' => 'مشاهدات المنتجات',
                    'data' => $products->map(fn (TrendValue $value) => $value->aggregate),
                    'backgroundColor' => '#1e40af',
                    'borderColor' => '#0000cc',
                ],
                [
                    'label' => 'مشاهدات المناقصات',
                    'data' => $tender->map(fn (TrendValue $value) => $value->aggregate),
                    'backgroundColor' => '#00bb00',
                    'borderColor' => '#4ade80',
                ],
                [
                    'label' => 'مشاهدات الشواغر وطلبات التوظيف',
                    'data' => $job->map(fn (TrendValue $value) => $value->aggregate),
                    'backgroundColor' => '#9d174d',
                    'borderColor' => '#9f1239',
                ],
            ],
            'labels' =>  $products->map(fn (TrendValue $value) => $value->date),
        ];
    }

    protected function getType(): string
    {
        return 'line';
    }
}
