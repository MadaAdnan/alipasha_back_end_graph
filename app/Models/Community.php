<?php

namespace App\Models;


use App\Enums\CommunityTypeEnum;
use App\Observers\CommunityObServe;
use App\Traits\MediaTrait;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Spatie\MediaLibrary\HasMedia;

class Community extends Model implements HasMedia
{
    use HasFactory, MediaTrait;

    protected $guarded = [];
    protected $withCount = [
        'users',
    ];
    protected $casts = [
        'last_update' => 'datetime',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::observe(CommunityObServe::class);
    }

    public function manager(): BelongsTo
    {
        return $this->belongsTo(User::class, 'manager_id');
    }

    public function scopeChannel(Builder $query): Builder
    {
        return $query->where('type', CommunityTypeEnum::CHANNEL->value);
    }

    public function scopeGroup($query)
    {
        return $query->where('type', CommunityTypeEnum::GROUP->value);
    }

    public function scopeChat($query)
    {
        return $query->where('type', CommunityTypeEnum::CHAT->value);
    }

    public function users(): BelongsToMany
    {
        return $this->belongsToMany(User::class)->take(3)->withPivot(['notify', 'is_manager']);
    }

    public function allUsers(): BelongsToMany
    {
        return $this->belongsToMany(User::class);
    }

    public function messages(): HasMany
    {
        return $this->hasMany(Message::class);
    }

}
