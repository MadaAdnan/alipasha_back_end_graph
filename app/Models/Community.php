<?php

namespace App\Models;

use App\Observers\CommunityObServe;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;

class Community extends Model
{
    use HasFactory;

    protected $guarded = [];

    protected $casts = [
        'last_change' => 'datetime'
    ];


    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::observe(CommunityObServe::class);
    }

    public function messages(): HasMany
    {
        return $this->hasMany(Message::class);
    }

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function seller(): BelongsTo
    {
        return $this->belongsTo(User::class, 'seller_id');
    }

    public function getUnread($userId): int
    {
        $count= $this->messages()->where('user_id', '!=', $userId)->where('is_seen', 0)->count();
        if($count==0){
            return 1;
        }
        return $count;
    }
}
